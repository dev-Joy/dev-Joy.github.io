<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Joy&#39;s dev log</title>
    <link>https://dev-joy.github.io/</link>
    
    <atom:link href="https://dev-joy.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 05 Nov 2024 13:59:22 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Nginx Reverse Proxy 설정</title>
      <link>https://dev-joy.github.io/2024/11/05/Nginx/</link>
      <guid>https://dev-joy.github.io/2024/11/05/Nginx/</guid>
      <pubDate>Tue, 05 Nov 2024 06:28:36 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;JAVA 파일을 빌드하여 &lt;code&gt;Root.war&lt;/code&gt; 파일을 생성합니다.&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;figcaption&gt;&lt;span&gt;terminal&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>JAVA 파일을 빌드하여 <code>Root.war</code> 파일을 생성합니다.</p><figure class="highlight shell"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bootWar</span></span><br><span class="line">./gradlew bootWar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">War</span></span><br><span class="line">./gradlew war</span><br></pre></td></tr></table></figure><h2 id="Tomcat-설정"><a href="#Tomcat-설정" class="headerlink" title="Tomcat 설정"></a><a href="https://tomcat.apache.org/"><strong>Tomcat 설정</strong></a></h2><ol><li><code>apache-tomcat-10.1.28/webapps/</code> 에 ROOT.war를 넣어줍니다.</li><li><code>apache-tomcat-10.1.28/bin</code> 폴더로 이동하여 <code>setenv.sh</code> 파일을 만듭니다.</li><li>환경 변수를 설정합니다.</li></ol><figure class="highlight bash"><figcaption><span>setenv.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;<span class="variable">$JAVA_OPTS</span> -Dspring.profiles.active=local&quot;</span></span><br><span class="line"><span class="built_in">export</span> CATALINA_OPTS=<span class="string">&quot;<span class="variable">$CATALINA_OPTS</span> -Dspring.application.batch.option=true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 환경 변수 설정</span></span><br><span class="line"><span class="built_in">export</span> SECRET_KEY=<span class="string">&quot;abcdefghijklmnop&quot;</span></span><br><span class="line"><span class="built_in">export</span> DATABASENAME=<span class="string">&quot;postgres&quot;</span></span><br><span class="line"><span class="built_in">export</span> USERNAME=<span class="string">&quot;postgres&quot;</span></span><br><span class="line"><span class="built_in">export</span> PASSWORD=<span class="string">&quot;postgres&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># spring.datasource 관련 환경 변수 설정</span></span><br><span class="line"><span class="built_in">export</span> DB_HOST=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="built_in">export</span> DB_PORT=<span class="string">&quot;5432&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spring Boot 애플리케이션에서 환경 변수를 참조하도록 설정</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;<span class="variable">$JAVA_OPTS</span> -Dspring.config.import=classpath:application-common.properties&quot;</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;<span class="variable">$JAVA_OPTS</span> -Dspring.datasource.url=jdbc:postgresql://<span class="variable">$&#123;DB_HOST&#125;</span>:<span class="variable">$&#123;DB_PORT&#125;</span>/<span class="variable">$&#123;DATABASENAME&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;<span class="variable">$JAVA_OPTS</span> -Dspring.datasource.username=<span class="variable">$&#123;USERNAME&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;<span class="variable">$JAVA_OPTS</span> -Dspring.datasource.password=<span class="variable">$&#123;PASSWORD&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hibernate 설정</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;<span class="variable">$JAVA_OPTS</span> -Dspring.jpa.hibernate.ddl-auto=update&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Main Setting</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;<span class="variable">$JAVA_OPTS</span> -Ddataportal.mainsetting.batchenabled=true&quot;</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;<span class="variable">$JAVA_OPTS</span> -Ddataportal.mainsetting.website-dbms=POSTGRESQL&quot;</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;<span class="variable">$JAVA_OPTS</span> -Ddataportal.mainsetting.website-host=<span class="variable">$&#123;DB_HOST&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;<span class="variable">$JAVA_OPTS</span> -Ddataportal.mainsetting.website-port=<span class="variable">$&#123;DB_PORT&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;<span class="variable">$JAVA_OPTS</span> -Ddataportal.mainsetting.website-database-name=website&quot;</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;<span class="variable">$JAVA_OPTS</span> -Ddataportal.mainsetting.website-user-name=admin&quot;</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;<span class="variable">$JAVA_OPTS</span> -Ddataportal.mainsetting.website-password=admin&quot;</span></span><br></pre></td></tr></table></figure><ol><li><p><code>apache-tomcat-10.1.28/bin</code> 폴더로 이동하여 <code>catalina.sh</code> 파일을 vim 또는 editor로 엽니다.</p></li><li><p><code>JAVA_HOME</code> 설정을 해줍니다. (Tomcat 서버가 실행될 때 필요한 JAVA와 관련한 위치를 연결하기 위해서)</p></li></ol><figure class="highlight shell"><figcaption><span>catalina.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Oracle JAVA 설치시 <span class="built_in">echo</span> <span class="variable">$PATH</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">또는</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">brew로 JAVA 설치시</span></span><br><span class="line"></span><br><span class="line">/usr/libexec/java_home</span><br></pre></td></tr></table></figure><p>참고: <a href="https://velog.io/@soyul2823/Mac-%EC%9E%90%EB%B0%94-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0">mac JAVA_HOME 환경변수 설정</a></p><ol start="3"><li><code>catalina.sh</code>파일에 아래를 추가해줍니다.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># OS specific support. $var _must_ be set to either true or false.</span><br><span class="line"># Set JAVA_HOME and update PATH</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><ol start="4"><li>Tomcat을 실행합니다.</li></ol><p>tomcat 실행시 <code>Root.war</code>가 자동으로 풀립니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd apache-tomcat-10.1.28/bin</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><h1 id="Nginx와-같은-웹-서버를-왜-사용할까요"><a href="#Nginx와-같은-웹-서버를-왜-사용할까요" class="headerlink" title="Nginx와 같은 웹 서버를 왜 사용할까요?"></a><strong>Nginx와 같은 웹 서버를 왜 사용할까요?</strong></h1><ul><li>클라이언트의 요청 처리를 분산시킬 수 있는 로드 밸런스를 사용함으로써 효율적인 처리를 합니다.</li><li>정적파일을 다이렉트로 제공해주기 때문에 백엔드 서버에 부담을 주지 않습니다.</li><li>클라이언트는 Ngnix 포트로만 백엔드 서버에 접근할 수 있어 보안에 도움이 됩니다.</li></ul><h1 id="개념설명"><a href="#개념설명" class="headerlink" title="개념설명"></a><strong>개념설명</strong></h1><p><strong>리버스 프록시</strong>란</p><p>클라이언트 요청을 대신 받아 <strong>내부 서버로 전달</strong>해주는 것을 리버스 프록시(Reverse Proxy) 라고 합니다.</p><p><strong>프록시</strong>란 대리라는 의미로,</p><p><strong>정보를 대신 전달해주는 주체</strong>라고 생각하면 되는데, 만약 이 프록시 없이 웹 서버를 운영한다고 가정합니다.</p><ul><li>사용자 앞단에 있으면 Forward Proxy</li><li>서버 앞단에 있으면 Reverse Proxy</li></ul><p>localhost:3000</p><p>라고 하는 웹서버를 열어서 운영했을 때, 사용자가 갑자기 많아지거나,</p><p>웹서버가 그대로 노출되어 있기 때문에 보안적으로 위험성이 있겠죠?</p><p>nginx를 사용하면 로드 밸런싱으로 부하를 줄여줄 수 있고,</p><p>분산 처리 또한 가능하며 웹서버의 SSL 인증도 적용할 수 있습니다.</p><p>따라서 아래와 같이 <strong>사용자 -&gt; nginx -&gt; 웹서버</strong>로 구성해서</p><p>사용자의 요청을 nginx가 대신 웹서버로 전달해주도록 구성합니다.</p><h1 id="Reverse-Proxy-사용이유"><a href="#Reverse-Proxy-사용이유" class="headerlink" title="Reverse Proxy 사용이유"></a><strong>Reverse Proxy 사용이유</strong></h1><ol><li>동시성 : 다중 연결을 더 잘 처리할 수 있는 역방향 프록시를 추가하면 백엔드 서버 성능이 크게 향상될 수 있다.</li><li>복원력 : 백엔드 서버의 상태를 모니터링하고 서비스가 재개될 때까지 실패한 서버에 대한 요청 전송을 중지할 수 있다. 역방향 프록시가 여전히 작동 중인 백엔드 서버에 요청을 자동으로 보내기 때문에 클라이언트에는 오류가 표시되지 않는다.</li><li>확장성 : 역방향 프록시는 백엔드 서버 그룹에 대한 단일 “공개 얼굴”이기 때문에 변화하는 트래픽 부하에 따라 서버를 추가 및 제거할 수 있다.</li><li>레이어 7라우팅 : 역방향 프록시는 모든 서버로 향하는 트래픽을 보고 필요에 따라 요청과 응답을 수정하여 각 요청을 보낼 위치에 대한 지능적인 결정을 내릴 수 있다. 요청의 특정 HTTP 헤더, URL의 일부, 클라이언트의 지리적 위치 등에 따라 라우팅 결정을 내릴 수 있다.</li><li>캐싱 : 역방향 프록시는 캐싱을 수행하기에 좋은 장소이다. 일반적으로 모든 요청을 백엔드 서버로 보내고 각 백엔드 서버가 자체 캐시를 구축하도록 하는 것보다 콘텐츠를 개시하는 것이 훨씬 더 효율적이다.</li><li>기타 기능 : 역방향 프록시는 백엔드 서버 앞에 앉음으로써 대역폭 또는 요청 속도에 따른 트래픽 형성, 연결 제한, 다양한 인증 체계와의 통합, 활동 모니터링 등과 같은 다른 기능도 수행할 수 있다.</li></ol><h1 id="포트"><a href="#포트" class="headerlink" title="포트"></a><strong>포트</strong></h1><ul><li>프론트엔드(Web) : 3000 port (React Local Port)</li><li>백엔드(Server, API): 8080 port (Tomcat Default Port)</li></ul><h1 id="Ngix-reverse-proxy-구성"><a href="#Ngix-reverse-proxy-구성" class="headerlink" title="Ngix reverse proxy 구성"></a><strong>Ngix reverse proxy 구성</strong></h1><p><a href="https://velog.io/@chickenfondue/nginx-docker-compose%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%A6%AC%EB%B2%84%EC%8A%A4-%ED%94%84%EB%A1%9D%EC%8B%9C-%EA%B5%AC%EC%84%B1"><img src="/2024/11/05/Nginx/reverse_proxy.png" class=""></a></p><p>출처:</p><ul><li><a href="https://velog.io/@chickenfondue">https:&#x2F;&#x2F;velog.io&#x2F;@chickenfondue</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://dev-joy.github.io/categories/server/">server</category>
      
      
      <category domain="https://dev-joy.github.io/tags/nginx/">nginx</category>
      
      
      <comments>https://dev-joy.github.io/2024/11/05/Nginx/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Array</title>
      <link>https://dev-joy.github.io/2024/07/03/Array/</link>
      <guid>https://dev-joy.github.io/2024/07/03/Array/</guid>
      <pubDate>Wed, 03 Jul 2024 12:32:35 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Time Complexity: O(N)&lt;br&gt;Space Complexity: O(N)&lt;br&gt;값을 index로 접근&lt;/p&gt;
&lt;h2 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Time Complexity: O(N)<br>Space Complexity: O(N)<br>값을 index로 접근</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A.append, A.pop <span class="comment"># O(1) 평균</span></span><br><span class="line">A.insert, A.remove <span class="comment"># O(n) Worst Case</span></span><br><span class="line">A.index, A.count <span class="comment"># O(n) Worst Case</span></span><br><span class="line">A.pop() <span class="comment"># 평균 O(1)</span></span><br><span class="line">A.pop(<span class="number">2</span>) <span class="comment"># O(n) Worst Case</span></span><br><span class="line"><span class="comment"># 평균 O(1) Hashtable</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>list 리스트: 용량 자동조절(dynamic array)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">A = []                  <span class="comment"># 빈 리스트</span></span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(A)) <span class="comment"># 28bytes</span></span><br><span class="line">A.append(<span class="number">10</span>)            <span class="comment"># A = [10]</span></span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(A)) <span class="comment"># 44bytes</span></span><br></pre></td></tr></table></figure><p>list class:<br>capacity: 용량<br>n: 현재 저장된 값의 개수</p><figure class="highlight python"><figcaption><span>append구현</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">A.append(X):</span><br><span class="line"><span class="keyword">if</span> A.n &lt; A.capacity:</span><br><span class="line">  A[n] = x</span><br><span class="line">  A.n = n + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>: A.n == A.capacity</span><br><span class="line">B = A.capacity*<span class="number">2</span> <span class="comment">#A.capacity*2 크기의 리스트 새로 할당</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">  B[i] = A[i] <span class="comment"># O(n)</span></span><br><span class="line"><span class="keyword">del</span> A</span><br><span class="line">A = B</span><br><span class="line">A[n] = x</span><br><span class="line">A.n = n+<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>A[0] &#x3D; 2를 넣으면<br>A[0]의 주소가 2가 저장되어있는 주소를 가르킴<br>A[0]+1을 하면 A[0] &#x3D; 3이 됨<br>그러면 3이 저장되어있는 새로운 주소를 가르킴</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.append(값)</span><br><span class="line">append: 맨 뒤에 값 추가</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.pop()</span><br><span class="line">pop: 맨뒤의 값을 지우고 리턴</span><br><span class="line">pop(index): A[index]를 제거하고 리턴</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.insert(index, value)</span><br><span class="line"><span class="built_in">list</span>[index]에 value를 삽입</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.remove(value): <span class="built_in">list</span>에서 value제거</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.index(value), <span class="built_in">list</span>.count(value)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul><li>push, pop, unshift, shift</li><li>concat</li><li>indexOf, lastIndexOf, includes</li></ul><p>-join<br>-split</p><p>-splice: 배열자체를 변형<br>-slice(start, end) : end exclusive하다</p><p>Array 배열</p><ul><li>map, forEach, filter, find, findIndex, reduce, every, some 등 내장 iteration 메소드를 활용한다.</li><li>map : array → array</li><li>forEach: array 한개씩 순회하여 콜백 호출</li><li>filter: 필터링</li><li>find: 한개 찾아 반환</li><li>findIndex: 한개 찾아 인덱스 반환</li><li>reduce: array → single value</li><li>reduceRight: 배열거꾸로 부터 누적</li><li>every: 모두 만족하면 true 값을 반환</li><li>some: 한개라도 만족하면 true 값을 반환</li></ul>]]></content:encoded>
      
      
      <category domain="https://dev-joy.github.io/categories/data-structures/">data structures</category>
      
      
      <category domain="https://dev-joy.github.io/tags/data-structures/">data structures</category>
      
      
      <comments>https://dev-joy.github.io/2024/07/03/Array/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSV 파일 다루기</title>
      <link>https://dev-joy.github.io/2024/01/05/CSV-%ED%8C%8C%EC%9D%BC-%EB%8B%A4%EB%A3%A8%EA%B8%B0/</link>
      <guid>https://dev-joy.github.io/2024/01/05/CSV-%ED%8C%8C%EC%9D%BC-%EB%8B%A4%EB%A3%A8%EA%B8%B0/</guid>
      <pubDate>Fri, 05 Jan 2024 13:45:58 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Header-즉-첫번째-줄-linux에서-삭제하기&quot;&gt;&lt;a href=&quot;#Header-즉-첫번째-줄-linux에서-삭제하기&quot; class=&quot;headerlink&quot; title=&quot;Header 즉 첫번째 줄 linux에서 삭제하기&quot;&gt;&lt;/a&gt;Heade</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Header-즉-첫번째-줄-linux에서-삭제하기"><a href="#Header-즉-첫번째-줄-linux에서-삭제하기" class="headerlink" title="Header 즉 첫번째 줄 linux에서 삭제하기"></a>Header 즉 첫번째 줄 linux에서 삭제하기</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">덮어쓰기 전의 파일을 확장자.bak를 붙여서 보관하는 것이 가능하다</span></span><br><span class="line">sed -i.bak -e &#x27;/^#/d&#x27; config.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DATA.csv에서 첫번째 줄 제거하여 DATA_NO_HEADER.csv 생성</span></span><br><span class="line">sed &#x27;1d&#x27; DATA.csv &gt; DATA_NO_HEADER.csv</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">동일한 이름으로 첫번째 줄 제거</span></span><br><span class="line">sed -i &#x27;1d&#x27; DATA.csv</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">패턴을 포함하는 선을 삭제</span></span><br><span class="line">vi DATA.csv</span><br><span class="line">:g/&lt;pattern&gt;/d</span><br><span class="line">:wq</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;#&#x27;</span>문자가 포함된 라인 삭제하면서 공백 제거된 내용만 출력</span></span><br><span class="line">sed &#x27;/#/d&#x27; jupyterhub_config.py | sed &#x27;/^$/d&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">덮어쓰기</span></span><br><span class="line">cat &gt; 명령어는 덮어쓰기 명령어이다.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">이어쓰기</span></span><br><span class="line">. cat &gt;&gt; [파일 경로 / 이름]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>cat [ 파일 경로 &#x2F; 이름 ]</p><ul><li>파일을 열어 내용을 출력</li></ul></li><li><p>cat &gt; [ 파일 경로 &#x2F; 이름 ]</p><ul><li><p>같은 이름의 파일이 없는 경우 : 파일 새로 만들고 내용 입력하기</p></li><li><p>같은 이름의 파일이 있는 경우 : 파일 덮어쓰고 내용 새로 입력하기</p></li></ul></li><li><p>cat &gt;&gt; [ 파일 경로 &#x2F; 이름 ]</p><ul><li><p>같은 이름의 파일이 없는 경우 : 파일 새고 만들고 내용 입력하기</p></li><li><p>같은 이름의 파일이 있는 경우 : 기존 파일의 내용 밑에 ﻿이어쓰기</p></li></ul></li></ol><h1 id="첫줄-일괄-삭제해서"><a href="#첫줄-일괄-삭제해서" class="headerlink" title="첫줄 일괄 삭제해서"></a>첫줄 일괄 삭제해서</h1><p>find . -type f -name “*.csv” -exec sed -i “-new” ‘1d’ {} ;</p><h1 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h1><blockquote><p>Comma Separated Values</p></blockquote><h1 id="HBase와-Hive-차이는"><a href="#HBase와-Hive-차이는" class="headerlink" title="HBase와 Hive 차이는?"></a>HBase와 Hive 차이는?</h1><ul><li><p>HBase는 NoSQL 데이터베이스이고 Hive는 하둡잡을 실행하는 DW 프레임워크이다.</p></li><li><p>HBase는 HDFS위에서 동작하고, Hive는 MapReduce 위에서 동작한다.</p></li><li><p><strong>Schema flexibility:</strong> 다양한 구조와 포맷의 데이터를 처리하고 저장합니다.</p></li><li><p><strong>SQL-like queries:</strong> Hadoop에서</p></li><li><p><strong>Data management:</strong></p></li></ul><h1 id="Hive-DDL"><a href="#Hive-DDL" class="headerlink" title="Hive DDL"></a>Hive DDL</h1><p>하이브는 CSV 형식의 파일을 효과적으로 적재하기 위한 CSV 서데를 제공한다.</p><ul><li>Hive 0.14 버전부터 기본 지원<ul><li><a href="https://cwiki.apache.org/confluence/display/Hive/CSV+Serde">CSV 서데</a>를 이용하면  테이블 칼럼의 타입은 String 으로 고정</li></ul></li></ul><ul><li>sepratorChar: 칼럼간의 구분자</li><li>quoteChar: 칼럼의 값을 지정한 문자로 묶어준다.</li><li>escapeChar: 칼럼에 데이터를 입력할 때 파싱하지 않고 무시</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_table</span><br><span class="line">(   </span><br><span class="line">   a string</span><br><span class="line">,   b string</span><br><span class="line">)</span><br><span class="line"><span class="type">ROW</span> FORMAT SERDE</span><br><span class="line"><span class="string">&#x27;org.apache.hadoop.hive.serde2.OpenCSVSerde&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> SERDEPROPERTIES</span><br><span class="line">(   &quot;separatorChar&quot; <span class="operator">=</span> &quot;,&quot;</span><br><span class="line">,   &quot;quoteChar&quot;     <span class="operator">=</span> &quot;&#x27;&quot;</span><br><span class="line">,   &quot;escapeChar&quot;    <span class="operator">=</span> &quot;\\&quot;</span><br><span class="line">)</span><br><span class="line">STORED <span class="keyword">AS</span> TEXTFILE;</span><br></pre></td></tr></table></figure><h2 id="참고한-게시글"><a href="#참고한-게시글" class="headerlink" title="[참고한 게시글]"></a>[참고한 게시글]</h2><p><a href="https://118k.tistory.com/451">https://118k.tistory.com/451</a></p>]]></content:encoded>
      
      
      <category domain="https://dev-joy.github.io/categories/Data-Engineering/">Data Engineering</category>
      
      <category domain="https://dev-joy.github.io/categories/Data-Engineering/Hadoop-Ecosystem/">Hadoop Ecosystem</category>
      
      
      <category domain="https://dev-joy.github.io/tags/Data-Engineering-Hive/">Data Engineering,Hive</category>
      
      
      <comments>https://dev-joy.github.io/2024/01/05/CSV-%ED%8C%8C%EC%9D%BC-%EB%8B%A4%EB%A3%A8%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Tableau Embedding</title>
      <link>https://dev-joy.github.io/2023/03/01/Tableau-Embedding/</link>
      <guid>https://dev-joy.github.io/2023/03/01/Tableau-Embedding/</guid>
      <pubDate>Tue, 28 Feb 2023 15:20:40 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Tableau-Server에서-설정&quot;&gt;&lt;a href=&quot;#Tableau-Server에서-설정&quot; class=&quot;headerlink&quot; title=&quot;Tableau Server에서 설정&quot;&gt;&lt;/a&gt;Tableau Server에서 설정&lt;/h1&gt;&lt;ul&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Tableau-Server에서-설정"><a href="#Tableau-Server에서-설정" class="headerlink" title="Tableau Server에서 설정"></a>Tableau Server에서 설정</h1><ul><li><a href="https://help.tableau.com/current/server/ko-kr/trusted_auth_trustIP.htm">Tableau Server에 신뢰할 수 있는 IP 주소 또는 호스트 이름 추가</a></li></ul><h1 id="Tableau-Embedding-API-Version-2"><a href="#Tableau-Embedding-API-Version-2" class="headerlink" title="Tableau Embedding API Version 2"></a><a href="https://help.tableau.com/current/api/js_api/en-us/JavaScriptAPI/js_api_whats_new.htm">Tableau Embedding API Version 2</a></h1><ul><li><a href="https://github.com/datapainters/tableau-rest-java-library/blob/master/src/tabRest/tabRest.java">Tableau Rest API Java Github</a></li></ul><h1 id="Tableau-Embedding-API-Version-3"><a href="#Tableau-Embedding-API-Version-3" class="headerlink" title="Tableau Embedding API Version 3"></a><a href="https://help.tableau.com/current/api/embedding_api/en-us/index.html">Tableau Embedding API Version 3</a></h1><ul><li><a href="https://help.tableau.com/current/server/ko-kr/connected_apps.htm">Tableau의 연결된 앱을 구성하여 내장된 콘텐츠에 대한 SSO 지원</a></li></ul><figure class="highlight shell"><figcaption><span>tsm(Tableau Server Manager)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/tableau/tableau_server/</span><br><span class="line">tsm configuration get -k gateway.public.host</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server.tableau.com</span></span><br><span class="line">tsm configuration get -k gateway.trusted</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">127.0.0.1, 127.0.0.2</span></span><br><span class="line">tsm configuration get -k gateway.trusted_hosts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server.tableau.com</span></span><br><span class="line">tsm configuration get -k gateway.public.port</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">443</span></span><br><span class="line"></span><br><span class="line">tsm configuration get -k vizportal.rest_api.cors.enabled</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="literal">true</span></span></span><br><span class="line">tsm configuration get -k vizportal.rest_api.cors.allow_origin</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">https://127.0.0.1 https://server.tableau.com, https://127.0.0.2, https://web.tableau.com</span></span><br><span class="line">tsm configuration get -k wgserver.unrestricted_ticket</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="literal">true</span></span></span><br><span class="line">tsm configuration get -k wgserver.clickjack_defense.enabled</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="literal">false</span></span></span><br><span class="line">tsm configuration get -k vizportal.oauth.external_authorization_server.max_expiration_period_in_minutes</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">600</span></span><br><span class="line"></span><br><span class="line">tsm pending-changes apply</span><br></pre></td></tr></table></figure><h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><ol><li>hosts 파일 우클릭 &gt; Code(으)로 열기 &gt; 수정 &gt; 저장 &gt; “Failed to save ‘hosts’: Insufficient permissions.</li><li>Select ‘Retry as Admin’ to retry as administrator.”라는 알림창이 뜨면 [Retry as Admin…] 클릭 &gt; Windows 명령 처리기 [예] 클릭</li></ol><figure class="highlight bash"><figcaption><span>C:\Windows\System32\drivers\etc\hosts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 server.tableau.com</span><br><span class="line">127.0.0.2 web.tableau.com</span><br></pre></td></tr></table></figure><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><figure class="highlight bash"><figcaption><span>Mac(iterm, terminal)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /private/etc/hosts <span class="comment">#i</span></span><br><span class="line"></span><br><span class="line">127.0.0.1 server.tableau.com</span><br><span class="line">127.0.0.2 web.tableau.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># :wq</span></span><br></pre></td></tr></table></figure><blockquote><p>*.tableau.com로 Domain 맞춰서 SameSite Error 해결</p></blockquote><h2 id="Python-Java-JavaScript로-구현"><a href="#Python-Java-JavaScript로-구현" class="headerlink" title="Python, Java, JavaScript로 구현"></a>Python, Java, JavaScript로 구현</h2><blockquote><p>token이 제대로 됐는지 <a href="https://jwt.io/">https://jwt.io/</a>에서 확인</p></blockquote><figure class="highlight python"><figcaption><span>JSONWebToken.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line">token = jwt.encode(</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;iss&quot;</span>: connectedAppClientId,</span><br><span class="line"><span class="string">&quot;exp&quot;</span>: datetime.datetime.utcnow() + datetime.timedelta(minutes=<span class="number">5</span>),</span><br><span class="line"><span class="string">&quot;jti&quot;</span>: <span class="built_in">str</span>(uuid.uuid4()),</span><br><span class="line"><span class="string">&quot;aud&quot;</span>: <span class="string">&quot;tableau&quot;</span>,</span><br><span class="line"><span class="string">&quot;sub&quot;</span>: user,</span><br><span class="line"><span class="string">&quot;scp&quot;</span>: [<span class="string">&quot;tableau:views:embed&quot;</span>, <span class="string">&quot;tableau:metrics:embed&quot;</span>]</span><br><span class="line">&#125;,</span><br><span class="line">connectedAppSecretKey,</span><br><span class="line">algorithm = <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;kid&#x27;</span>: connectedAppSecretId,</span><br><span class="line"><span class="string">&#x27;iss&#x27;</span>: connectedAppClientId</span><br><span class="line">        &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>JSONWebToken.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.nimbusds.jose.*;</span><br><span class="line"><span class="keyword">import</span> com.nimbusds.jose.crypto.*;</span><br><span class="line"><span class="keyword">import</span> com.nimbusds.jwt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">secret</span> <span class="operator">=</span> <span class="string">&quot;secretvalue&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">kid</span> <span class="operator">=</span> <span class="string">&quot;connectedAppSecretId&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">clientId</span> <span class="operator">=</span> <span class="string">&quot;connectedAppClientId&quot;</span>;</span><br><span class="line">List&lt;String&gt; scopes = <span class="keyword">new</span></span><br><span class="line"><span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;tableau:views:embed&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;username&quot;</span>;</span><br><span class="line"><span class="type">JWSSigner</span> <span class="variable">signer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MACSigner</span>(secret);</span><br><span class="line"><span class="type">JWSHeader</span> <span class="variable">header</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">JWSHeader</span>.Builder(JWSAlgorithm.HS256).keyID(kid).customParam(<span class="string">&quot;iss&quot;</span>, clientId).build();</span><br><span class="line"><span class="type">JWTClaimsSet</span> <span class="variable">claimsSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JWTClaimsSet</span>.Builder()</span><br><span class="line">.issuer(clientId)</span><br><span class="line">.expirationTime(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().getTime() + <span class="number">60</span> * <span class="number">1000</span>)) <span class="comment">//expires in 1 minute</span></span><br><span class="line">.jwtID(UUID.randomUUID().toString())</span><br><span class="line">.audience(<span class="string">&quot;tableau&quot;</span>)</span><br><span class="line">.subject(username)</span><br><span class="line">.claim(<span class="string">&quot;scp&quot;</span>, scopes)</span><br><span class="line">.build();</span><br><span class="line"><span class="type">SignedJWT</span> <span class="variable">signedJWT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedJWT</span>(header, claimsSet);</span><br><span class="line">signedJWT.sign(signer);</span><br><span class="line">model.addAttribute(<span class="string">&quot;token&quot;</span>, signedJWT.serialize());</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>nest.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">JwtService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/jwt&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; v4 <span class="keyword">as</span> uuid &#125; <span class="keyword">from</span> <span class="string">&#x27;uuid&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> config <span class="keyword">from</span> <span class="string">&#x27;config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tableauConfig = config.<span class="title function_">get</span>(<span class="string">&#x27;tableau&#x27;</span>);</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TableauService</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">private jwtService: JwtService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">getTableauToken</span>(<span class="params">username: string</span>)&#123;</span><br><span class="line"><span class="keyword">const</span> token = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">jwtService</span>.<span class="title function_">sign</span>(</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">iss</span>: tableauConfig.<span class="property">connectedAppClientId</span>,</span><br><span class="line"><span class="attr">aud</span>: <span class="string">&#x27;tableau&#x27;</span>,</span><br><span class="line"><span class="attr">jti</span>: <span class="title function_">uuid</span>(),</span><br><span class="line"><span class="attr">sub</span>: username,</span><br><span class="line"><span class="attr">scp</span>: [</span><br><span class="line"><span class="string">&#x27;tableau:view:embed&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tableau:views:embed_authoring&#x27;</span>,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">header</span>: &#123;</span><br><span class="line"><span class="attr">alg</span>: <span class="string">&#x27;HS256&#x27;</span>,</span><br><span class="line"><span class="attr">kid</span>: tableauConfig.<span class="property">connectedAppSecretId</span>,</span><br><span class="line"><span class="attr">iss</span>: tableauConfig.<span class="property">connectedAppClientId</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">secret</span>: tableauConfig.<span class="property">secretvalue</span>,</span><br><span class="line"><span class="attr">expiresIn</span>: <span class="string">&#x27;5m&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">);</span><br><span class="line"><span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://dev-joy.github.io/categories/Tableau/">Tableau</category>
      
      <category domain="https://dev-joy.github.io/categories/Tableau/Tableau-Embedding/">Tableau Embedding</category>
      
      
      <category domain="https://dev-joy.github.io/tags/Tableau-Embedding/">Tableau Embedding</category>
      
      
      <comments>https://dev-joy.github.io/2023/03/01/Tableau-Embedding/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Tools 소개</title>
      <link>https://dev-joy.github.io/2023/02/08/Tools-%EC%86%8C%EA%B0%9C/</link>
      <guid>https://dev-joy.github.io/2023/02/08/Tools-%EC%86%8C%EA%B0%9C/</guid>
      <pubDate>Tue, 07 Feb 2023 16:05:06 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;계속 업데이트 됩니다!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mobaxterm.mobatek.net/&quot;&gt;MobaXterm&lt;/a&gt;&lt;br&gt;Putty + FTP&lt;/p&gt;
&lt;/li&gt;
&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>계속 업데이트 됩니다!</p></blockquote><ul><li><p><a href="https://mobaxterm.mobatek.net/">MobaXterm</a><br>Putty + FTP</p></li><li><p><a href="https://dbeaver.io/">DBeaver</a><br>DB Editor</p></li><li><p><a href="https://cmder.app/">cmder</a><br>Window에서 Linux 명령어 사용가능</p></li><li><p><a href="https://obsidian.md/">obsidian</a><br>markdown 노트</p></li><li><p><a href="https://marp.app/">Marp</a><br>Markdown Presentation Ecosystem</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://dev-joy.github.io/categories/Tools/">Tools</category>
      
      
      <category domain="https://dev-joy.github.io/tags/tools/">tools</category>
      
      
      <comments>https://dev-joy.github.io/2023/02/08/Tools-%EC%86%8C%EA%B0%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>신찬수-자료구조와알고리즘</title>
      <link>https://dev-joy.github.io/2022/11/20/%EC%8B%A0%EC%B0%AC%EC%88%98-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/</link>
      <guid>https://dev-joy.github.io/2022/11/20/%EC%8B%A0%EC%B0%AC%EC%88%98-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/</guid>
      <pubDate>Sun, 20 Nov 2022 14:20:48 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=M2mcJvmYpWY&amp;list=PLsMufJgu5933ZkBCHS7bQTx0bncjwi4PK&amp;index=2&quot;&gt;한국외대 신찬수 교수님 자료구조와알고리즘&lt;/a&gt;&lt;/p&gt;
&lt;h1 </description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="https://www.youtube.com/watch?v=M2mcJvmYpWY&list=PLsMufJgu5933ZkBCHS7bQTx0bncjwi4PK&index=2">한국외대 신찬수 교수님 자료구조와알고리즘</a></p><h1 id="자료구조-Data-Structure-알고리즘-Algoritm"><a href="#자료구조-Data-Structure-알고리즘-Algoritm" class="headerlink" title="자료구조(Data Structure), 알고리즘(Algoritm)"></a>자료구조(Data Structure), 알고리즘(Algoritm)</h1><p>자료: data -&gt; [저장공간(memory) + 읽기,쓰기,삽입,삭제,탐색(연산)] &#x3D;&gt; 구조<br>알고리즘: data (유한한 횟수의 연산들) 입력-&gt; 정답 출력</p><p>자료구조 (예:) 1. 변수(variable) 2.배열(array), 리스트(list)<br>알고리즘 (예:) 100개의 정수: 리스트 A:입력 -&gt; 오름차순 정렬:출력</p><figure class="highlight python"><figcaption><span>explnation.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span> <span class="comment"># 쓰기 연산</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 읽기 연산</span></span><br><span class="line"></span><br><span class="line">A = [<span class="number">3</span>, -<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">접근: 원소의 index</span></span><br><span class="line"><span class="string">읽기, 쓰기: A[3]</span></span><br><span class="line"><span class="string">삽입: A.append(9) # 맨 끝에 추가,</span></span><br><span class="line"><span class="string">      A.insert(0, 100) # 0번째 idx에 100 값 추가</span></span><br><span class="line"><span class="string">삭제: A.pop() # 가장 마지막 제거,</span></span><br><span class="line"><span class="string">      A.pop(2) # 2번쨰 idx 값 제거</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="인류-최초의-알고리즘"><a href="#인류-최초의-알고리즘" class="headerlink" title="인류 최초의 알고리즘"></a>인류 최초의 알고리즘</h2><blockquote><p>ac, 페르시아, Algebra 수학자 Al-khwarizmi<br>-&gt; <strong>Alg</strong>orismus + A<strong>rithm</strong>os &#x3D;&gt; [Algorithm]</p></blockquote><h1 id="최대공약수-GCD-계산-알고리즘-by-Euclid"><a href="#최대공약수-GCD-계산-알고리즘-by-Euclid" class="headerlink" title="최대공약수(GCD)계산 알고리즘 by Euclid"></a>최대공약수(GCD)계산 알고리즘 by Euclid</h1><figure class="highlight python"><figcaption><span>greatest_common_divisor.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">while</span> a!=<span class="number">0</span> <span class="keyword">and</span> b!=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> a&gt;b: a = a-b</span><br><span class="line">        <span class="keyword">else</span>: b = b-a</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://dev-joy.github.io/categories/data-structures/">data structures</category>
      
      
      <category domain="https://dev-joy.github.io/tags/algorithms/">algorithms</category>
      
      <category domain="https://dev-joy.github.io/tags/data-structures/">data structures</category>
      
      
      <comments>https://dev-joy.github.io/2022/11/20/%EC%8B%A0%EC%B0%AC%EC%88%98-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Apache Spark 설치</title>
      <link>https://dev-joy.github.io/2022/11/03/Apache-Spark-%EC%84%A4%EC%B9%98/</link>
      <guid>https://dev-joy.github.io/2022/11/03/Apache-Spark-%EC%84%A4%EC%B9%98/</guid>
      <pubDate>Thu, 03 Nov 2022 11:56:27 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Window-운영체제&quot;&gt;&lt;a href=&quot;#Window-운영체제&quot; class=&quot;headerlink&quot; title=&quot;Window 운영체제&quot;&gt;&lt;/a&gt;Window 운영체제&lt;/h1&gt;&lt;h2 id=&quot;1-Anaconda-설치하기&quot;&gt;&lt;a href=&quot;#1-</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Window-운영체제"><a href="#Window-운영체제" class="headerlink" title="Window 운영체제"></a>Window 운영체제</h1><h2 id="1-Anaconda-설치하기"><a href="#1-Anaconda-설치하기" class="headerlink" title="1. Anaconda 설치하기"></a>1. <a href="https://www.anaconda.com/products/distribution">Anaconda</a> 설치하기</h2><p>Anaconda Prompt에서 python 3.8 이상인지 확인</p><p><code>where python</code> 으로 Python이 어디에 설치되어 있는지 확인</p><p>pip : python package installer<br><code>where pip</code>으로 pip이 어디에 있는지 확인</p><p><code>pip --version</code>으로 pip 버전 확인</p><h2 id="2-JAVA"><a href="#2-JAVA" class="headerlink" title="2. JAVA"></a>2. <a href="https://www.oracle.com/kr/java/technologies/downloads/">JAVA</a></h2><p><code>java --version</code>으로 버전 확인<br>Extended Support Until이 긴 JAVA 8(LTS)을 다운받는다</p><h2 id="3-Spark"><a href="#3-Spark" class="headerlink" title="3. Spark"></a>3. <a href="https://spark.apache.org/downloads.html">Spark</a></h2><img src="/2022/11/03/Apache-Spark-%EC%84%A4%EC%B9%98/spark.png" class=""><img src="/2022/11/03/Apache-Spark-%EC%84%A4%EC%B9%98/spark_download.png" class=""><p>다운받은 파일을 원하는 위치에 이동한다.</p><img src="/2022/11/03/Apache-Spark-%EC%84%A4%EC%B9%98/spark_directory.png" class=""><h2 id="4-Hadoop"><a href="#4-Hadoop" class="headerlink" title="4. Hadoop"></a>4. <a href="https://github.com/cdarlint/winutils">Hadoop</a></h2><p>hadoop-2.7.7을 사용<br>다운받은 파일을 원하는 위치에 이동한다.</p><img src="/2022/11/03/Apache-Spark-%EC%84%A4%EC%B9%98/hadoop_directory.png" class=""><h2 id="5-Pyspark"><a href="#5-Pyspark" class="headerlink" title="5. Pyspark"></a>5. Pyspark</h2><p>Anaconda Prompt에서 <code>pip install pyspark</code></p><h2 id="환경변수-설정"><a href="#환경변수-설정" class="headerlink" title="환경변수 설정"></a>환경변수 설정</h2><p><strong style="color:red">주의사항: 파일경로에 빈칸이 존재하면 Error가 발생</strong></p><img src="/2022/11/03/Apache-Spark-%EC%84%A4%EC%B9%98/system_enviroment.png" class=""><p>JAVA_HOME<br>D:\ProgramFiles\Java\java-14-openjdk-14.0.2.12\bin</p><p>HADOOP_HOME<br>D:\ProgramFiles\Hadoop</p><p>SPARK_HOME<br>D:\ProgramFiles\Spark\spark-3.2.0-bin-hadoop2.7</p><p>PYSPARK_PYTHON<br><code>where python</code>을 해서 D:\ProgramFiles\Anaconda3\python.exe</p><p><strong>환경변수 &gt; 변수: Path를 선택하여 [편집]버튼을 누르고 아래와 같이 추가</strong></p><img src="/2022/11/03/Apache-Spark-%EC%84%A4%EC%B9%98/path.png" class=""><img src="/2022/11/03/Apache-Spark-%EC%84%A4%EC%B9%98/path_add.png" class=""><h1 id="Mac-운영체제"><a href="#Mac-운영체제" class="headerlink" title="Mac 운영체제"></a>Mac 운영체제</h1><h2 id="1-Anaconda-설치하기-1"><a href="#1-Anaconda-설치하기-1" class="headerlink" title="1. Anaconda 설치하기"></a>1. <a href="https://www.anaconda.com/products/distribution">Anaconda</a> 설치하기</h2><h2 id="2-which-python-으로-경로-찾기"><a href="#2-which-python-으로-경로-찾기" class="headerlink" title="2. which python 으로 경로 찾기"></a>2. <code>which python</code> 으로 경로 찾기</h2><h2 id="3-Homebrew-설치"><a href="#3-Homebrew-설치" class="headerlink" title="3. Homebrew 설치"></a>3. <a href="https://brew.sh/">Homebrew</a> 설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JAVA 버전확인</span></span><br><span class="line">java -version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JAVA8 설치</span></span><br><span class="line">brew install --cask adoptopenjdk8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SCALA 설치</span></span><br><span class="line">brew install scala</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Apache Spark 설치</span></span><br><span class="line">brew install apache-spark</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pip 버전확인</span></span><br><span class="line">pip --version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pyspark 설치</span></span><br><span class="line">pip install pyspark</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pyspark 터미널 뜨는지 확인</span></span><br><span class="line">pyspark</span><br></pre></td></tr></table></figure><img src="/2022/11/03/Apache-Spark-%EC%84%A4%EC%B9%98/pyspark.png" class="">]]></content:encoded>
      
      
      <category domain="https://dev-joy.github.io/categories/Data-Engineering/">Data Engineering</category>
      
      <category domain="https://dev-joy.github.io/categories/Data-Engineering/Apache-Spark/">Apache Spark</category>
      
      
      <category domain="https://dev-joy.github.io/tags/Data-Engineering/">Data Engineering</category>
      
      <category domain="https://dev-joy.github.io/tags/Apache-Spark/">Apache Spark</category>
      
      
      <comments>https://dev-joy.github.io/2022/11/03/Apache-Spark-%EC%84%A4%EC%B9%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Google Machine Learning Bootcamp 2022 수료후기</title>
      <link>https://dev-joy.github.io/2022/09/24/Google-Machine-Learning-Bootcamp-2022-%EC%88%98%EB%A3%8C%ED%9B%84%EA%B8%B0/</link>
      <guid>https://dev-joy.github.io/2022/09/24/Google-Machine-Learning-Bootcamp-2022-%EC%88%98%EB%A3%8C%ED%9B%84%EA%B8%B0/</guid>
      <pubDate>Sat, 24 Sep 2022 06:30:41 GMT</pubDate>
      
        
        
      <description>&lt;img src=&quot;/2022/09/24/Google-Machine-Learning-Bootcamp-2022-%EC%88%98%EB%A3%8C%ED%9B%84%EA%B8%B0/gather_town.png&quot; class=&quot;&quot;&gt;
&lt;p&gt;출처: Gather To</description>
        
      
      
      
      <content:encoded><![CDATA[<img src="/2022/09/24/Google-Machine-Learning-Bootcamp-2022-%EC%88%98%EB%A3%8C%ED%9B%84%EA%B8%B0/gather_town.png" class=""><p>출처: Gather Town에서 나홀로 사진찍기</p><img src="/2022/09/24/Google-Machine-Learning-Bootcamp-2022-%EC%88%98%EB%A3%8C%ED%9B%84%EA%B8%B0/machine_learning_bootcamp_2022_schedule_final.png" class=""><p>[출처: Google Developers 국문 블로그]<br><a href="https://developers-kr.googleblog.com/2022/05/mlbootcamp22.html">2022년 3기 구글 머신러닝 부트캠프</a><br><strong>프로그램 기간: 2022.06.22 ~ 2022.09.19</strong>(약 3개월)</p><h1 id="Mission1-Coursera-강의-수료"><a href="#Mission1-Coursera-강의-수료" class="headerlink" title="Mission1: Coursera 강의 수료"></a>Mission1: Coursera 강의 수료</h1><p>-앤드류 응(Andrew Ng) 교수님의 <a href="https://www.coursera.org/specializations/deep-learning">딥러닝 특화과정(Deep Learning Specialization)</a> 코스를 수강하였습니다.</p><blockquote><p>Coursera 강의를 수강하다보면 가끔씩 한글자막이 이상하거나 없는 경우가 있었습니다.<br><a href="https://www.youtube.com/c/Deeplearningai/playlists">DeepLearningAI Youtube</a> 또는 <a href="https://www.boostcourse.org/search/show?searchQuery=Andrew+Ng&MAX=20#course">boostcourse</a>의 한글자막을 이용할 때도 있었습니다.</p></blockquote><ul><li>Course1: Neural Networks and Deep Learning</li><li>Course2: Improving Deep Neural Networks: Hyperparameter Tuning, Regularization and Optimization</li><li>Course3: Structuring Machine Learning Projects</li><li>Course4: Convolutional Neural Networks</li><li>Course5: Sequence Models<br>강의 들으면서 머신러닝에 대해 전반적인 기초지식을 배웠습니다.</li></ul><blockquote><p><strong>수료증 TIP</strong>: 모든 Course를 다 듣고 최종 Course 수료증 받으시려면 신분증 인증하셔야 합니다.</p></blockquote><h1 id="Mission2-Kaggle-Tabular-playground-series-제출-or-Competition-상위-25"><a href="#Mission2-Kaggle-Tabular-playground-series-제출-or-Competition-상위-25" class="headerlink" title="Mission2: Kaggle Tabular playground series 제출 or Competition 상위 25%"></a>Mission2: Kaggle Tabular playground series 제출 or Competition 상위 25%</h1><img src="/2022/09/24/Google-Machine-Learning-Bootcamp-2022-%EC%88%98%EB%A3%8C%ED%9B%84%EA%B8%B0/kaggle_tps.png" class=""><p>매 달마다 Kaggle Tabular playground series가 열립니다.<br><del>빅데이터 분석기사 실기 공부하면서 배운 지식으로 TPS를 제출하였습니다.</del><br>참고 사이트: <a href="https://www.datamanim.com/intro.html">DataMamin</a> , <a href="https://www.kaggle.com/datasets/agileteam/bigdatacertificationkr">Big Data Certification KR</a><br>참고 서적: <a href="https://wikidocs.net/">위키독스</a>, <a href="https://thebook.io/">더북</a>, <a href="http://www.yes24.com/Product/Goods/108824557">파이썬 머신러닝 완벽 가이드</a>, <a href="https://books.google.co.kr/books/about/%ED%95%B8%EC%A6%88%EC%98%A8_%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D_2%ED%8C%90.html?id=CkLoDwAAQBAJ&printsec=frontcover&source=kp_read_button&hl=ko&redir_esc=y#v=onepage&q&f=false">핸즈온 머신러닝</a>, <a href="https://books.google.co.kr/books/about/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC_%ED%99%9C%EC%9A%A9%ED%95%9C.html?id=cHRkEAAAQBAJ&printsec=frontcover&source=kp_read_button&hl=ko&redir_esc=y#v=onepage&q&f=false">파이썬 라이브러리를 활용한 머신러닝</a></p><h1 id="Mission3-Certification-취득"><a href="#Mission3-Certification-취득" class="headerlink" title="Mission3: Certification 취득"></a>Mission3: Certification 취득</h1><ol><li><a href="https://www.tensorflow.org/certificate">Tensorflow Certification</a></li><li><a href="https://cloud.google.com/certification/data-engineer">GCP Professional Data Engineer certification</a></li><li><a href="https://cloud.google.com/certification/machine-learning-engineer">GCP Professional ML Engineer certification</a></li></ol><p>위와 같이 3가지 자격증 중 하나를 취득해야하는 데<br>Laurence Moroney의 <a href="https://www.coursera.org/professional-certificates/tensorflow-in-practice">TensorFlow Developer Professional Certificate</a> 강의 제공을 지원하고<br>Tensorflow에 대해 공부하고 싶어서 Tensorflow Certification을 선택하였습니다.<br><a href="https://github.com/https-deeplearning-ai/tensorflow-1-public">TF강의 Github</a></p><p>저는 <a href="https://colab.research.google.com/?hl=ko">Colab</a>에서 무료GPU 환경에서 문제를 풀어 model을 만든 뒤 h5 파일을 download 해서 시험에 제출하였습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.keras.callbacks <span class="keyword">import</span> ModelCheckpoint</span><br><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> files</span><br><span class="line"></span><br><span class="line"><span class="comment">### 시험을 치룰 때 유용한 코드</span></span><br><span class="line">    checkpoint_path = <span class="string">&#x27;mymodel_checkpoint.ckpt&#x27;</span></span><br><span class="line">    <span class="comment"># 학습중인 모델 자동으로 저장</span></span><br><span class="line">    checkpoint = ModelCheckpoint(filepath=checkpoint_path,</span><br><span class="line">                                 save_weights_only= <span class="literal">True</span>,</span><br><span class="line">                                 save_best_only=<span class="literal">True</span>,<span class="comment"># 검증 세트 손실이 기존의 최고 성능 모델에 비해 낮아질때만 저장</span></span><br><span class="line">                                 monitor=<span class="string">&#x27;val_loss&#x27;</span>,</span><br><span class="line">                                 verbose=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;sparse_categorical_crossentropy&#x27;</span>, metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    model.fit(X_train, y_train, validation_data=(X_test, y_test, callbacks=[checkpoint], epochs=<span class="number">10</span>)</span><br><span class="line">    model.load_weights(checkpoint_path) <span class="comment"># model 가중치 저장</span></span><br><span class="line"></span><br><span class="line">    model = solution_model()</span><br><span class="line">    model.save(<span class="string">&quot;mymodel.h5&quot;</span>)</span><br><span class="line">    files.download(<span class="string">&quot;mymodel.h5&quot;</span>) <span class="comment"># model 파일 다운로드</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.tensorflow.org/tutorials?hl=ko">Tensorflow 튜토리얼</a> &gt; <a href="https://app.trueability.com/google-certificates/tensorflow-developer">Tensorflow 시험접수</a> &gt; <a href="https://www.tensorflow.org/extras/cert/TF_Certificate_Candidate_Handbook_ko.pdf?hl=ko">Tensorflow 시험 가이드</a> &gt; <a href="https://www.tensorflow.org/extras/cert/Setting_Up_TF_Developer_Certificate_Exam.pdf">Tensorflow 시험환경</a> Setting하기</p><p><strong>UDACITY Tensorflow 자격증 강의</strong></p><blockquote><p><a href="https://www.udacity.com/course/intro-to-tensorflow-for-deep-learning--ud187">Intro to TensorFlow for Deep Learning</a> 무료 강의<br><a href="https://www.notion.so/9ffc7dd00a014b23bf0d5f06c335190c?v=dd6e841a2df1423880177ce89da783bd">Udacity Class Materials Notion</a><br>출처: <a href="https://littleworks.tistory.com/8">소소한블로그</a></p></blockquote></blockquote><ul><li>응시료 : $100 (해외 결제가 가능한 카드)</li><li>시험 시간 : 300분</li><li>시험 유형 :<ul><li>Category 1: Basic &#x2F; Simple model</li><li>Category 2: Model from learning dataset</li><li>Category 3: Convolutional Neural Network with real-world image dataset</li><li>Category 4: NLP Text Classification with real-world text dataset</li><li>Category 5: Sequence Model with real-world numeric dataset<br>출처 : <a href="https://teddylee777.github.io/thoughts/tensorflow-2-certification">테디노트</a></li></ul></li><li>시험 환경 : 인터넷이 연결되어 있는 어디에서나 가능</li><li>IDE : <a href="https://www.jetbrains.com/ko-kr/pycharm/download/#section=windows">PyCharm</a>에 시험용 Plugin(TensorFlow Developer Certificate) 설치 ( Communiy 버전도 가능)</li><li>시험 준비물 : 여권이나 영문 운전면허증 또는 주민등록증, 셀카</li><li>재응시 기간<br>1번째 불합격 시, 14일 이후 재응시 가능<br>2번째 불합격 시, 2개월 이후 재응시 가능<br>3번째 불합격 시, 1년 이후 재응시 가능</li><li>합격점수 : 총 100점 만점에 90점 이상</li><li>결과발표 : 응시자가 시험 제출 시 채점 과정을 거쳐 응시자 포털에 점수 게시. 시험 합격 후에는 등록된 이메일 주소로 인증서가 발송<br>(영업일 기준 10일 이내)</li><li>인증서 유효기간 : 36개월<br><a href="https://developers.google.com/certification/directory/tensorflow?hl=ko">Google Developers Certification</a>에서 합격자를 볼 수 있습니다.</li></ul><h1 id="Tech-Talk-amp-Office-Hour-amp-Resume-Clinic-amp-Mentoring-등"><a href="#Tech-Talk-amp-Office-Hour-amp-Resume-Clinic-amp-Mentoring-등" class="headerlink" title="Tech Talk &amp; Office Hour &amp; Resume Clinic &amp; Mentoring 등"></a>Tech Talk &amp; Office Hour &amp; Resume Clinic &amp; Mentoring 등</h1><img src="/2022/09/24/Google-Machine-Learning-Bootcamp-2022-%EC%88%98%EB%A3%8C%ED%9B%84%EA%B8%B0/tech_talk.png" class=""><p>[출처: Google Developers 국문 블로그]</p><p>매주 진행되는 회사별 Tech Talk, Office Hour을 하면서<br>현업에서 어떤 Machine Learning을 사용하는지 설명해주셨습니다.<br>또한 사전질문을 하여 좋은 답변을 얻을 수 있었고 Office Tour가 진행되는 회사도 있었습니다.<br>Resume Clinic, Mentoring을 통해서 이력서를 어떻게 작성하고 어떤 방향으로 준비해야할지 알았습니다.</p><h1 id="Google-Machine-Learning-Goods"><a href="#Google-Machine-Learning-Goods" class="headerlink" title="Google Machine Learning Goods"></a>Google Machine Learning Goods</h1><p><strong>미션을 수행하는데 힘이 되준 Gifts</strong><br><strong><em>잘쓰겠습니다~ 너무 예뻐요</em></strong> 😍<br>질문하면 친절하게 답변주신 구글 머신러닝 부트캠프 순선님, 누리님과 참가자분들 모두들 감사합니다!</p><table><thead><tr><th align="left">Gift</th><th align="left">Gift</th><th align="left">Gift</th><th align="left">Gift</th></tr></thead><tbody><tr><td align="left"><img src="/2022/09/24/Google-Machine-Learning-Bootcamp-2022-%EC%88%98%EB%A3%8C%ED%9B%84%EA%B8%B0/bag.jpg" class=""></td><td align="left"><img src="/2022/09/24/Google-Machine-Learning-Bootcamp-2022-%EC%88%98%EB%A3%8C%ED%9B%84%EA%B8%B0/cap.jpg" class=""></td><td align="left"><img src="/2022/09/24/Google-Machine-Learning-Bootcamp-2022-%EC%88%98%EB%A3%8C%ED%9B%84%EA%B8%B0/t-shirt.jpg" class=""></td><td align="left"><img src="/2022/09/24/Google-Machine-Learning-Bootcamp-2022-%EC%88%98%EB%A3%8C%ED%9B%84%EA%B8%B0/tumbler.jpg" class=""></td></tr></tbody></table><h1 id="Google-Machine-Learning-Bootcamp-시작하기전에-하면-좋았을-점"><a href="#Google-Machine-Learning-Bootcamp-시작하기전에-하면-좋았을-점" class="headerlink" title="Google Machine Learning Bootcamp 시작하기전에 하면 좋았을 점"></a>Google Machine Learning Bootcamp 시작하기전에 하면 좋았을 점</h1><ul><li>Python 자료구조 및 알고리즘 공부<br>추천강의: <a href="https://www.youtube.com/c/ChanSuShin/playlists">한국외대 신찬수 교수님 Youtube</a></li><li>코딩테스트 준비<br>추천사이트: <a href="https://www.acmicpc.net/">백준</a>, <a href="https://school.programmers.co.kr/learn/challenges">프로그래머스</a>, <a href="https://leetcode.com/problemset/all/">LeetCode</a></li><li>영어 공부<br>AMA(Ask Me Anything) session with Kevin Murphy을 하였을 때 영어공부를 더 열심히 해야 겠다고 생각했습니다.<br><del>영어를 잘했더라면 질문도 했을텐데…ㅠㅠ 말씀하시는 속도도 빨라서 순간 멍때리면 알아듣지 못하는 경우도 있었다</del>😢</li></ul><h1 id="한줄평"><a href="#한줄평" class="headerlink" title="한줄평"></a>한줄평</h1><blockquote><p>Google Machine Learning Bootcamp 수료가 끝이 아니라 Machine Learning 시작이다🏃‍♀️🏃‍♂️🏃</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://dev-joy.github.io/categories/review/">review</category>
      
      
      <category domain="https://dev-joy.github.io/tags/Google-Machine-Learning-Bootcamp-2022/">Google Machine Learning Bootcamp 2022</category>
      
      
      <comments>https://dev-joy.github.io/2022/09/24/Google-Machine-Learning-Bootcamp-2022-%EC%88%98%EB%A3%8C%ED%9B%84%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>big-O</title>
      <link>https://dev-joy.github.io/2022/09/20/big-O/</link>
      <guid>https://dev-joy.github.io/2022/09/20/big-O/</guid>
      <pubDate>Tue, 20 Sep 2022 14:26:03 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;date: 2022-09-20 23:26:03&lt;br&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Chcl71vEkRg&quot;&gt;Big O notation&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.youtube.com</description>
        
      
      
      
      <content:encoded><![CDATA[<p>date: 2022-09-20 23:26:03<br><a href="https://www.youtube.com/watch?v=Chcl71vEkRg">Big O notation</a><br><a href="https://www.youtube.com/watch?v=cNrsDdxdsfw">Big Ω notation&#x2F; Big θ notation</a><br><a href="https://www.youtube.com/watch?v=Chcl71vEkRg">Big O notation</a></p><h1 id="시간-복잡도-점근적-실행-시간-asymptotic-runtime"><a href="#시간-복잡도-점근적-실행-시간-asymptotic-runtime" class="headerlink" title="시간 복잡도(점근적 실행 시간, asymptotic runtime)"></a>시간 복잡도(점근적 실행 시간, asymptotic runtime)</h1><ul><li><p>O(big-O): 시간의 상한<br>배열의 모든 값을 출력하는 알고리즘은 O(N)으로 표현할 수 있지만<br>O(N^3),O(N^2),O(2^N)도 옳은 표현이다.<br>다시 말하자면 알고리즘의 수행 시간은 적어도 이들 중 하나보다 빠르기만 하면 된다.</p></li><li><p>Ω (big-Omega): 시간의 하한<br>배열의 모든 값을 출력하는 알고리즘은 Ω(N) 뿐만 아니라 Ω(logN) 혹은 Ω(1)로도 표현할 수 있다.결국, 해당 알고리즘은 Ω 수행 시간보다 빠를 수 없게 된다.</p></li><li><p>θ (big-theta): 딱 맞는 수행 시간<br>θ는 O와 Ω 둘 다 의미한다. 즉, 어떤 알고리즘의 수행시간이 O(N)이면서 Ω(N)이라면, 이 알고리즘의 수행 시간을 θ(N)로 표현할 수 있다.</p></li></ul><h1 id="공간-복잡도"><a href="#공간-복잡도" class="headerlink" title="공간 복잡도"></a>공간 복잡도</h1><ul><li>사용하는 스택 공간 또는 공간 복잡도 계산에 포함된다.</li><li>함수들이 호출 스택에 동시에 존재하지 않으면 계산에 포함되지 않는다.</li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><blockquote><ol><li>상수항은 무시하라<br>O(N) &#x3D; O(2N)</li><li>지배적이지 않은 항은 무시하라<br>O(N^2) &#x3D; O(N^2 + N)</li><li>여러 부분으로 이루어진 알고리즘: 덧셈 vs 곱셈</li></ol><ul><li>O(A+B)<br>만약 알고리즘이 “A 일을 모두 끝마친 후에 B일을 수행하라”의 형태라면 A와 B의 수행 시간을 더해야 한다.</li><li>O(A*B)<br>만약 알고리즘이 “A 일을 할 떄마다 B 일을 수행하라”의 형태라면 A와 B의 수행시간을 곱해야 한다.</li></ul></blockquote>]]></content:encoded>
      
      
      <category domain="https://dev-joy.github.io/categories/data-structures/">data structures</category>
      
      <category domain="https://dev-joy.github.io/categories/algorithms/">algorithms</category>
      
      
      <category domain="https://dev-joy.github.io/tags/algorithms/">algorithms</category>
      
      <category domain="https://dev-joy.github.io/tags/data-structures/">data structures</category>
      
      
      <comments>https://dev-joy.github.io/2022/09/20/big-O/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://dev-joy.github.io/2022/08/28/hello-world/</link>
      <guid>https://dev-joy.github.io/2022/08/28/hello-world/</guid>
      <pubDate>Sun, 28 Aug 2022 13:42:58 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://dev-joy.github.io/2022/08/28/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
